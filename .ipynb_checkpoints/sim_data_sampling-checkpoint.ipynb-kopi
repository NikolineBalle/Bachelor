{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy.linalg import solve\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.linalg import qr\n",
    "from scipy import optimize\n",
    "from scipy.optimize import minimize_scalar\n",
    "import egrss \n",
    "import lambda_fun\n",
    "import os \n",
    "\n",
    "a,b = -0.2, 0.5\n",
    "n = 100\n",
    "p = 2\n",
    "xi = (b-a) ** (2 * p - 1) \n",
    "x = np.linspace(a,b,N)\n",
    "lamb = 1 / (0.2 ** 2)\n",
    "\n",
    "def y(x):\n",
    "        return 0.25*np.cos(4*np.pi *x) + 0.15*np.sin(12* np.pi *x) + 0.2 * x\n",
    "\n",
    "yhat = y(x) + 1 / np.sqrt(lamb) * np.random.normal(loc = 0, scale = 1, size = x.shape)\n",
    "\n",
    "def smoothing_spline_reg(y,Ut,Vt,Wt,eps,lamb,delt,perturb = None):\n",
    "    # compute factorization\n",
    "    d    =   delt / lamb\n",
    "    Zt,c = egrss.potrf(Ut,Vt,d)\n",
    "    \n",
    "    # compute rhs\n",
    "    if perturb is not None: \n",
    "        # perturbation of rhs\n",
    "        n,  = y.shape\n",
    "        xiy = np.random.normal(loc=0, scale=1, size= n)\n",
    "        xix = np.random.normal(loc=0, scale=1, size= n)       \n",
    "        rhs = egrss.symv(Utilde,Vtilde,y+ np.sqrt(lamb) / lamb * xiy) + np.sqrt(delt) / lamb * egrss.trmv(Utilde, Wtilde, xix, c = eps, trans = 'N')\n",
    "        \n",
    "    else:\n",
    "        rhs = egrss.symv(Utilde,Vtilde,y)\n",
    "        \n",
    "    # solve LL'x = rhs    \n",
    "    Ltrhs= egrss.trsv(Ut,Zt,rhs,c,'N')\n",
    "    x    = egrss.trsv(Ut,Zt,Ltrhs,c,'T')\n",
    "        \n",
    "    return x\n",
    "\n",
    "def plims(x,p = None):\n",
    "    # computes the emperical quantiles of x\n",
    "    # m is number of samples\n",
    "    # n is number of parameters\n",
    "    \n",
    "    m,n = x.shape\n",
    "    \n",
    "    if p is None: \n",
    "        p = np.array([0.025, 0.975]) # corresponds to 95% CI\n",
    "        \n",
    "    k, = p.shape\n",
    "    y = np.zeros((k,n))\n",
    "    for i in range(n):\n",
    "        y[:,i] = np.interp((m-1)*p,range(m),np.sort(x[:,i])) \n",
    "    \n",
    "    return y\n",
    "\n",
    "### Gibbs sampler - we aim to sample from the joint posterior pi(v,u,sigma,lambda,delta|y) \n",
    "# See posteriors derived in overleaf\n",
    "import time\n",
    "nsamps = 5000\n",
    "K      = 2 # equvalent to degree of spline\n",
    "\n",
    "alph   = 1e+3\n",
    "# Initialization and memory allocation\n",
    "lamb_samp   = np.zeros(nsamps)\n",
    "delt_samp   = np.zeros(nsamps)\n",
    "x_samp      = np.zeros((n,nsamps))\n",
    "\n",
    "\n",
    "# pre-compute matrices and matrix-vector products\n",
    "Ut, Vt = egrss.generators((x-a)/(b-a),K)\n",
    "\n",
    "Utilde = Ut\n",
    "Vtilde = Vt + alph * Ut\n",
    "Wtilde,eps = egrss.potrf(Utilde,Vtilde,1e-10)\n",
    "\n",
    "residual = yhat-x_samp[:,0]\n",
    "\n",
    "for i in range(nsamps-1):      \n",
    "    # sample hyperparameters lambda and nu (delta and alpha)\n",
    "    # (1a) sample lambda    \n",
    "    a0,b0    = 1.0 + n / 2, 1e-4 + 0.5 * np.dot(residual,residual)\n",
    "    lamb_samp[i+1] =  np.random.gamma(shape=a0, scale=1/b0)\n",
    "\n",
    "    # (1b) sample delta\n",
    "    Linvx = egrss.trsv(Utilde,Wtilde,x_samp[:,i],eps,'N')\n",
    "    a1,b1    = 1.0 + n / 2, (1e+4 + 0.5 * np.dot(Linvx,Linvx)) # 1e+4\n",
    "    delt_samp[i+1] = np.random.gamma(shape=a1, scale=1/b1)\n",
    "\n",
    "    # 2a) Compute posterior\n",
    "    x_samp[:,i+1] = smoothing_spline_reg(yhat,Utilde,Vtilde,Wtilde,eps,lamb_samp[i+1],delt_samp[i+1],perturb = 1)\n",
    "    \n",
    "    residual = yhat-x_samp[:,i+1]\n",
    "\n",
    "## Sample statistics \n",
    "# Remove burn-in phase \n",
    "burnin   = int(lamb_samp.size/ 2) \n",
    "x_res    = x_samp[:,burnin:]\n",
    "lamb_res = lamb_samp[burnin:]\n",
    "delt_res = delt_samp[burnin:]\n",
    "\n",
    "# Reshape results for statistical functions \n",
    "delt_res.shape=(nsamps-burnin,1)\n",
    "lamb_res.shape=(nsamps-burnin,1)\n",
    "\n",
    "# Compute posterior mean \n",
    "lamb_mean = np.mean(lamb_res,0)\n",
    "delt_mean = np.mean(delt_res,0)\n",
    "x_mean    = np.mean(x_res,1)\n",
    "\n",
    "# Compute 95% CI \n",
    "lamb_ci  = plims(lamb_res)\n",
    "delt_ci  = plims(delt_res)\n",
    "x_ci     = plims(x_res.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "plt.plot(x,y(x),'--',color = 'navy', linewidth=1.5, label = '$y(x)$')\n",
    "plt.plot(x,yhat,'bo',markersize = 4.5, color = 'cornflowerblue', label = '$\\hat{y}_i$')\n",
    "plt.plot(x,x_mean ,color = 'tomato', linewidth=1.2, label = 'model')\n",
    "plt.fill_between(x,x_ci[0,:],x_ci[1,:], color='tomato', alpha=.25,label = '$95\\%$ CI')\n",
    "plt.xticks([])\n",
    "plt.yticks([])\n",
    "plt.xlabel('x', loc = 'right', fontsize = 12)\n",
    "plt.ylabel('y', loc = 'top', rotation = 0, fontsize = 12)\n",
    "plt.xlim([a,b])\n",
    "plt.tick_params(left=True, bottom = False, right = False, top = False)\n",
    "plt.legend(numpoints = 1, prop = {'size': 14}, loc = 'lower right',  bbox_to_anchor=(1.33, b))\n",
    "ax = plt.gca()\n",
    "ax.set_facecolor('whitesmoke')\n",
    "for spine in plt.gca().spines.values():\n",
    "    spine.set_visible(False)\n",
    "plt.show()\n",
    "my_path = os.getcwd()\n",
    "fig.savefig(my_path + '/Plots/sim_sampling_fit.pdf', bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
